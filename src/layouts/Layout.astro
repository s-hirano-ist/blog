---
import { SITE } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";

const IS_DEV = import.meta.env.MODE === "development";

export type Props = {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
};

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.description,
  ogImage = SITE.ogImage,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const socialImageURL = new URL(
  ogImage ? ogImage : SITE.ogImage,
  Astro.url.origin,
).href;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="192x192" href="touch-icon.png" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <ViewTransitions />
    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />
    <script>
      declare global {
        interface Window {
          va: () => void;
          vaq: Array<unknown>;
        }
      }

      window.va =
        window.va ||
        function () {
          (window.vaq = window.vaq || []).push(arguments);
        };
    </script>
    {!IS_DEV && <script defer src="/_vercel/insights/script.js" />}
    <script>
      // This code must run faster as possible to avoid flickering on page load
      // We cannot use ESM imports for trade-off
      const currentTheme = localStorage.getItem("theme");

      function getPreferTheme() {
        if (currentTheme) return currentTheme;
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }

      let themeValue = getPreferTheme();

      function setPreference() {
        localStorage.setItem("theme", themeValue);
        reflectPreference();
      }

      function reflectPreference() {
        document.firstElementChild?.setAttribute("data-theme", themeValue);

        document
          .querySelector("#theme-btn")
          ?.setAttribute("aria-label", themeValue);
      }
      // set early so no page flashes / CSS is made aware
      reflectPreference();
      window.onload = () => {
        // set on load so screen readers can get the latest value on the button
        reflectPreference();
        // now this script can find and listen for clicks on the control
        document.querySelector("#theme-btn")?.addEventListener("click", () => {
          themeValue = themeValue === "light" ? "dark" : "light";
          setPreference();
        });
        document.addEventListener("astro:after-swap", () => {
          reflectPreference();
        });
      };
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", ({ matches: isDark }) => {
          themeValue = isDark ? "dark" : "light";
          setPreference();
        });
    </script>

    <!-- Google tag (gtag.js) -->
    <script
      type="text/partytown"
      src="https://www.googletagmanager.com/gtag/js?id=G-E84VM45L0L"></script>
    <script type="text/partytown">
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        // eslint-disable-next-line no-undef
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-E84VM45L0L");
    </script>
  </head>
  <body>
    <div class="main-click-area">
      <slot />
    </div>
  </body>
</html>
